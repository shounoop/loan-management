version: '1.0'

services:
  spring-service:
    build: ./spring-service
    # restart: on-failure # restart the container if it fails to start or crashes during runtime 
    env_file: ./.env
    ports:
      - $SPRING_LOCAL_PORT:$SPRING_DOCKER_PORT
    environment:
      SPRING_APPLICATION_JSON: '{ "spring.datasource.url"  : "jdbc:mysql://spring-db:$MYSQLDB_DOCKER_PORT/$SPRING_MYSQLDB_DATABASE?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false", "spring.datasource.username" : "$SPRING_MYSQLDB_USERNAME", "spring.datasource.password" : "$SPRING_MYSQLDB_ROOT_PASSWORD", "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQLDialect", "spring.jpa.hibernate.ddl-auto" : "update", "shounoop.app.jwtCookieName" : "shounoop", "shounoop.app.jwtSecret" : "mtuCT9rfHdCHgc4Ieq1eogXi0Ur0b7U3f123243432423", "shounoop.app.jwtExpirationMs" : "86400000", "shounoop.app.expressServiceUrl" : "http://express-service:3000/api" }'
    volumes:
      - .m2:/root/.m2 # mount the local maven repository to the container to avoid downloading dependencies every time the container starts
    networks:
      - app-network
    depends_on:
      - spring-db
    stdin_open: true # true to keep the container running in the background and false to stop it when the terminal is closed
    tty: true # true to keep the container running in the background and false to stop it when the terminal is closed

  spring-db:
    image: mysql:8
    # restart: unless-stopped # restart the container unless it is stopped by the user, if not specified, the container will not restart 
    env_file: ./.env
    environment:
      - MYSQL_ROOT_PASSWORD=$SPRING_MYSQLDB_ROOT_PASSWORD
      - MYSQL_DATABASE=$SPRING_MYSQLDB_DATABASE
    ports:
      - $SPRING_MYSQLDB_LOCAL_PORT:$MYSQLDB_DOCKER_PORT
    volumes:
      - spring-db-data:/var/lib/mysql
    networks:
      - app-network

  express-service:
    build: ./express-service
    restart: always # restart the container always if it stops 
    env_file: ./.env
    ports:
      - $EXPRESS_LOCAL_PORT:$EXPRESS_DOCKER_PORT
    environment:
      DB_HOST: $EXPRESS_MYSQLDB_HOST
      DB_USERNAME: $EXPRESS_MYSQLDB_USERNAME
      DB_PASSWORD: $EXPRESS_MYSQLDB_ROOT_PASSWORD
      DB_DATABASE_NAME: $EXPRESS_MYSQLDB_DATABASE
      DB_DIALECT: $EXPRESS_MYSQLDB_DIALLCT
      DB_SSL: $EXPRESS_MYSQLDB_SSL
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY_ID: $AWS_SECRET_ACCESS_KEY_ID
      AWS_REGION: $AWS_REGION
      BUCKET_NAME: $BUCKET_NAME
      EMAIL_APP_PASSWORD: $EMAIL_APP_PASSWORD
      EMAIL_APP: $EMAIL_APP
    depends_on:
      - express-db
    networks:
      - app-network
    expose:
      - $EXPRESS_DOCKER_PORT # expose the port to other services in the same network

  express-db:
    image: mysql:8
    env_file: ./.env
    environment:
      MYSQL_ROOT_PASSWORD: $EXPRESS_MYSQLDB_ROOT_PASSWORD
      MYSQL_DATABASE: $EXPRESS_MYSQLDB_DATABASE
    volumes:
      - express-db-data:/var/lib/mysql # express-db-data is the name of the volume, /var/lib/mysql is the path where mysql stores data inside the container
    networks:
      - app-network
    ports:
      - $EXPRESS_MYSQLDB_LOCAL_PORT:$MYSQLDB_DOCKER_PORT

volumes:
  spring-db-data:
  express-db-data:


networks:
  app-network:
